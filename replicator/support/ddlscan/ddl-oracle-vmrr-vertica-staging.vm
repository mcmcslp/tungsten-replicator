#*
	VMware Continuent Tungsten Replicator
	Copyright (C) 2015 VMware, Inc. All rights reserved.

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

		http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.

	Initial developer(s): Linas Virbalas, Robert Hodges
	Contributor(s): MC Brown

	Velocity template for Tungsten.
 
*##parse("includes/table-counter.vm")
## Print header or help above the first table.
#if ( $counter == 1 )
#if( $help )
Velocity template to generate staging tables for Tungsten Replicaotr. 
  
Transforms MySQL table definition (DDL) to Vertica staging tables.
Reports errors (ERROR) and warnings (WARN).  Column mappings
generally map to those used by Tungsten Replicator.

Notes:

  * Each table definition gets a default projection at table creation time
    through use of ORDER BY clause on tungsten_seqno and tungsten_row_id.
#else
#parse("includes/ddl-header.vm")
CREATE SCHEMA "$table.getSchema()"##
;
#end
#end
## Stop processing if help requested.
#if( $help )
#stop
#end

DROP TABLE ##
"${table.getSchema()}"."stage_xxx_$table.getName()"##
;

CREATE TABLE ##
"${table.getSchema()}"."stage_xxx_$table.getName()"##
#if ( $table.getName().substring(0, 1).matches("[0-9]") ) /* ERROR: table starts with a number, use rename option and a filter */ #end

(
  "tungsten_opcode" CHAR(1) ,
  "tungsten_seqno" INT ,
  "tungsten_row_id" INT ,
  "tungsten_commit_timestamp" TIMESTAMP ##
#foreach ( $col in $table.getAllColumns() )
## Print leading comma.
,
## Print column name. 
  "$col.getName()" ##
### Add datatype specification. 
#if ( $col.getTypeDescription().contains("TIMESTAMP") )
TIMESTAMP##
#elseif ( $col.getTypeDescription().contains("DATE") )
DATE##
#elseif ( $col.getTypeDescription().startsWith("BINARY_DOUBLE") )
DOUBLE PRECISION##
#elseif ( $col.getTypeDescription().startsWith("BINARY_FLOAT") )
FLOAT##
#elseif ( $col.getTypeDescription().startsWith("NUMBER") )## NUMBER(p,s)
$col.getTypeDescription().replaceFirst("NUMBER","NUMBER").replaceFirst(" UNSIGNED","")##
#elseif ( $col.getTypeDescription().startsWith("VARCHAR") )
VARCHAR($col.getLength())##
#elseif ( $col.getTypeDescription().startsWith("NVARCHAR") )
VARCHAR($col.getLength())##
#elseif ( $col.getTypeDescription().startsWith("CHAR") )
CHAR($col.getLength())##
#elseif ( $col.getTypeDescription().startsWith("NCHAR") )
CHAR($col.getLength())##
#elseif ( $col.getTypeDescription().startsWith("ROWID") )
CHAR(20)##
#elseif ( $col.getTypeDescription().startsWith("UROWID") )
VARBINARY(3950)##
#elseif ( $col.getTypeDescription().startsWith("LONG") )
VARBINARY(65000)##  /* WARN: Oracle LONG translated to max VARBINARY */ ##
#elseif ( $col.getTypeDescription().startsWith("RAW") )
#if ( $col.getLength() <= 65000 )
VARBINARY($col.getLength())##
#{else}VARBINARY(650000)##  /* WARN: Oracle RAW translated to max VARBINARY */ ##
#end
#elseif ( $col.getTypeDescription().startsWith("LONG RAW") )
#if ( $col.getLength() <= 65000 )
VARBINARY($col.getLength())##
#{else}VARBINARY(650000)##  /* WARN: Oracle LONG RAW translated to max VARBINARY */ ##
#end
#elseif ( $col.getTypeDescription().contains("BLOB") )
VARBINARY(65000) /* WARN: Oracle BLOB translated to max VARBINARY */ ##
#elseif ( $col.getTypeDescription().contains("BFILE") )
VARBINARY(65000) /* WARN: Oracle BFILE translated to max VARBINARY */ ##
#elseif ( $col.getTypeDescription().contains("CLOB") )
VARBINARY(65000) /* WARN: Oracle CLOB translated to max VARBINARY */ ##
#elseif ( $col.getTypeDescription().contains("NCLOB") )
VARBINARY(65000) /* WARN: Oracle NCLOB translated to max VARBINARY */ ##
#elseif ( $col.getTypeDescription().startsWith("FLOAT") )
FLOAT##
#elseif ( $col.getTypeDescription().startsWith("INTERVAL") )
CHAR(40)##
#else
$col.getTypeDescription() /* ERROR: unrecognized (type=$col.getType(), length=$col.getLength()) */##
#end ## End of if-then-then...-else.
#end ## End of column loop. 
) ORDER BY "tungsten_seqno", "tungsten_row_id";
